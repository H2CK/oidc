# This workflow is based on the nextcloud organization template repository
#
# https://github.com/nextcloud/.github
# https://docs.github.com/en/actions/learn-github-actions/sharing-workflows-with-your-organization

name: Build app

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    branches:
      - "*"

env:
  PHP_VERSION: 7.4

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      - name: Check actor permission
        uses: skjnldsv/check-actor-permission@v2
        with:
          require: write

      - name: Set app env
        run: |
          # Split and keep last
          echo "APP_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          #echo "APP_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ env.APP_NAME }}

      - name: Get appinfo data
        id: appinfo
        uses: skjnldsv/xpath-action@master
        with:
          filename: ${{ env.APP_NAME }}/appinfo/info.xml
          expression: "//info//dependencies//nextcloud/@min-version"

      - name: Read package.json node and npm engines version
        uses: skjnldsv/read-package-engines-version-actions@v1.2
        id: versions
        # Continue if no package.json
        continue-on-error: true
        with:
          path: ${{ env.APP_NAME }}
          fallbackNode: "^12"
          fallbackNpm: "^6"

      - name: Set up node ${{ steps.versions.outputs.nodeVersion }}
        # Skip if no package.json
        if: ${{ steps.versions.outputs.nodeVersion }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.versions.outputs.nodeVersion }}

      - name: Set up npm ${{ steps.versions.outputs.npmVersion }}
        # Skip if no package.json
        if: ${{ steps.versions.outputs.npmVersion }}
        run: npm i -g npm@"${{ steps.versions.outputs.npmVersion }}"

      - name: Set up php ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none

      - name: Check composer.json
        id: check_composer
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ env.APP_NAME }}/composer.json"

      - name: Install composer dependencies
        if: steps.check_composer.outputs.files_exists == 'true'
        run: |
          cd ${{ env.APP_NAME }}
          composer install --no-dev

      - name: Build ${{ env.APP_NAME }}
        # Skip if no package.json
        if: ${{ steps.versions.outputs.nodeVersion }}
        run: |
          cd ${{ env.APP_NAME }}
          npm ci
          npm run build

      - name: Install Krankerl
        run: |
          wget https://github.com/ChristophWurst/krankerl/releases/download/v0.13.0/krankerl_0.13.0_amd64.deb
          sudo dpkg -i krankerl_0.13.0_amd64.deb

      - name: Checkout server ${{ fromJSON(steps.appinfo.outputs.result).nextcloud.min-version }}
        continue-on-error: true
        id: server-checkout
        run: |
          NCVERSION=${{ fromJSON(steps.appinfo.outputs.result).nextcloud.min-version }}
          wget --quiet https://download.nextcloud.com/server/releases/latest-$NCVERSION.zip
          unzip latest-$NCVERSION.zip

      - name: Checkout server master fallback
        uses: actions/checkout@v3
        if: ${{ steps.server-checkout.outcome != 'success' }}
        with:
          repository: nextcloud/server
          path: nextcloud

      - name: Package ${{ env.APP_NAME }} ${{ env.APP_VERSION }}
        # Try krankerl, fallback to makefile
        run: |
          cd ${{ env.APP_NAME }}
          krankerl package || make build-test

      - name: Sign app
        run: |
          # Extracting release
          cd ${{ env.APP_NAME }}/build/artifacts
          tar -xvf ${{ env.APP_NAME }}.tar.gz
          cd ../../../
          # Setting up keys
          echo "${{ secrets.APP_PRIVATE_KEY }}" > ${{ env.APP_NAME }}.key
          wget --quiet "https://github.com/nextcloud/app-certificate-requests/raw/master/${{ env.APP_NAME }}/${{ env.APP_NAME }}.crt"
          # Signing
          php nextcloud/occ integrity:sign-app --privateKey=../${{ env.APP_NAME }}.key --certificate=../${{ env.APP_NAME }}.crt --path=../${{ env.APP_NAME }}/build/artifacts/${{ env.APP_NAME }}
          # Rebuilding archive
          cd ${{ env.APP_NAME }}/build/artifacts
          tar -zcvf ${{ env.APP_NAME }}.tar.gz ${{ env.APP_NAME }}

      - name: Delete crt and key from local storage
        run: |
          rm -f *.key
          rm -f *.crt

